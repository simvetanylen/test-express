- Principal/Subject
- ORM subject filters
- Command security filters
- SIREN api
- Container
- Command handler
- Frontend
- Config
- Async Domain Events
- Logger
- Retries on conflict (mongo)
- Note : les regles de sécurité doivent être mise dans le retry, parce que l'update d'aggregat peut changer le résultat de la regle
- Protéger mdp de la serialization

Pour plus tard :
- Event sourced ORM
- Cors
- ORM
  - How to update multiple documents at once ?
  - How to ignore if a document is already deleted ?
- Sagas pour gérer des commandes sur plusieurs aggregats
- Open tracing/sentry
- Websockets (mongo ChangeStreams ?)
- Infinite loop on container dependencies ?
- Feature flags/profiles
- Scheduler
- headless crm integ
- tailwindui ?
- web-vitals

//    "dev": "concurrently \"npx tsc --watch\" \"nodemon -q dist/index.js\""

- voir pour avoir une structure :
    - ./commands
    - ./commands/create-article.ts
    - ./commands/create-article.tsx

- check https://github.com/wessberg/DI

- Gestion commandes avec un broker :
    - Success => Related domain event
    - Failure => CommandFailure<Exception>
    - Uuid de la commande présente dans chaque cas.
    - Utilisation d'un acteur pour lire le résultat de la commande